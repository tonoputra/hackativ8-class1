// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://swagger.io/terms",
        "contact": {
            "name": "Hacktiv8",
            "email": "admin@hacktiv8.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orders": {
            "get": {
                "description": "Get all orders in detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get all orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.GetOrdersSuccess"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/views.GetOrdersFailNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/views.GetOrdersFailNotFound"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "post": {
                "description": "Create new orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Create new orders",
                "parameters": [
                    {
                        "description": "Create order payload",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.CreateOrderReq"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "X-Token",
                        "name": "X-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.CreateOrderSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.CreateOrderFailBadRequest"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Order": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "time"
                },
                "customerName": {
                    "type": "string",
                    "example": "MNC B"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "productId": {
                    "type": "integer",
                    "example": 10
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "params.CreateOrderReq": {
            "type": "object",
            "properties": {
                "customerName": {
                    "type": "string"
                },
                "productId": {
                    "type": "integer"
                }
            }
        },
        "views.CreateOrderFailBadRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "BAD_REQUEST"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "views.CreateOrderSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "CREATED_ORDER_SUCCESS"
                },
                "payload": {
                    "$ref": "#/definitions/params.CreateOrderReq"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "views.GetOrdersFailNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "GET_ORDER_NOT_FOUND"
                },
                "status": {
                    "type": "integer",
                    "example": 404
                }
            }
        },
        "views.GetOrdersSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "GET_SUCCESS"
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Order"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1.0",
	Host:             "localhost:4000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Orders API",
	Description:      "Ini adalah simple API Spec untuk Orders",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
